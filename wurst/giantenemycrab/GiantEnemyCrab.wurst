package GiantEnemyCrab
import CrabIds
import ClosureTimers
import CrabWaypoints
import LinkedList
import Lodash
import Players
import BonusHandler
import Execute
import ClosureForGroups

// How long to wait before the next all-unit order.  Seconds.
constant REORDER_PERIOD = 15.

// How long to wait between iterations of unit handling.  Seconds.
constant WORK_PERIOD = 1.

constant fakeWaypoint = new Waypoint(10000, vec2(0., 0.))
// Find a target based on the live player worker that lags behind the most.
function getCreepTarget() returns vec2
	// The workers are owned by the static players list, and the waypoints are
	// owned by the static waypoints list.  Only the comparator should be
	// detroyed.
	FoldClosure<Worker, Waypoint> comparator = (Worker acc, Waypoint val) -> begin
		Waypoint ret
		if acc.nearestWaypoint.seq < val.seq
			ret = acc.nearestWaypoint
		else
			ret = val

		return ret
	end

	return allPlayers
		.map(p -> p.worker)
		.filter(w -> not w.worker == null and w.worker.isAlive())
		.forEach((Worker t) -> t.recalcNearestWaypoint())
		.foldl(
			fakeWaypoint,
			comparator)
		.point

constant grp = CreateGroup()
unit source
// Order this unit to roughly attack the target, using some modifiers:
// -   If there are adjacent enemy units, attack those instead.
// -   If the target is far away, use the move order.
// -   If the target at a variable medium distance, use the attack ground order.
function unit.creepOrder(vec2 target)
	source = this
	grp.enumUnitsInRange(
		this.getPos(),
		512.,
		Filter(() -> begin
			return source.isEnemyOf(GetFilterUnit().getOwner()) and
				GetFilterUnit().isAlive()
		end))

	if grp.hasNext()
		this.issuePointOrder("attack", grp.next().getPos())
	else
		this.issuePointOrder("attack", target)

public class GECrab
	unit crab
	vec2 target

	int spawnCrabby = 21
	int spawnKingler = 35
	int spawnPiglets = 65
	int count = 0
	var reorderCount = 0.

	construct(vec2 pos)
		crab = createUnit(CRAB_PLAYER, GECRAB_ID, pos, angle(0))
		crab.addAbility('Aeth')
		RemoveGuardPosition(crab)
		// CreateFogModifierRectBJ( true, CRAB_PLAYER, FOG_OF_WAR_VISIBLE, GetPlayableMapRect() )

	function startUpdate()
		doPeriodically(10.) (CallbackPeriodic cb) ->
			addUnitBonus(crab, Bonus.DAMAGE, 2)
			addUnitBonus(crab, Bonus.ATTACKSPEED, 2)

		doPeriodically(WORK_PERIOD, (CallbackPeriodic cb) -> begin
			execute(() -> begin
				// Update the current waypoint.
				if waypoints.size() > 0 and crab.getPos().distanceTo(waypoints.getFirst().point) < 300.
					waypoints.dequeue()

				// AI.
				reorderCount -= WORK_PERIOD
				if reorderCount < 0.
					reorderCount = REORDER_PERIOD

					// Find a target.
					let target = getCreepTarget()

					// Order all units.
					forUnitsOfPlayer(crab.getOwner(), (unit u) -> u.creepOrder(target))

				// Victory/lose conditions.
				boolean dead = true
				for p in allPlayers
					if p.worker.worker.isAlive()
						dead = false
						break
				if dead
					for p in allPlayers
						CustomDefeatBJ(p.p, "You suck")
				if not crab.isAlive()
					for p in allPlayers
						CustomVictoryBJ(p.p, true, true)

				// Minion unit spawns.
				spawnCrabby--
				if spawnCrabby < 0
					spawnCrabby = max(16, spawnKingler-1)
					addEffect("Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl", crab.getPos()).destr()
					for i = 0 to max(1, count / 40.).toInt()
						var crabby = createUnit(CRAB_PLAYER, CRABBY_ID, crab.getPos()+vec2(0,50), angle(0))..issuePointOrder("attack", waypoints.getFirst().point)
						..setTimedLife(160)
						addUnitBonus(crabby, Bonus.LIFE, (count * 1.75).round())
						addUnitBonus(crabby, Bonus.DAMAGE, (count / 8.).round())
					count++

				spawnKingler--
				if spawnKingler < 0
					spawnKingler = max(21, spawnKingler-1)
					addEffect("Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl", crab.getPos()).destr()
					let kingler = createUnit(CRAB_PLAYER, KINGLER_ID, crab.getPos(), angle(0))..issuePointOrder("attack", waypoints.getFirst().point)
					..setTimedLife(160.)
					addUnitBonus(kingler, Bonus.LIFE, (count.toReal() * 5.).round())
					addUnitBonus(kingler, Bonus.ATTACKSPEED, (count.toReal() * 0.25).round())
					count++

				spawnPiglets--
				if spawnPiglets < 0
					spawnPiglets = 95
					addEffect("Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl", crab.getPos()).destr()
					addUnitBonus(crab, Bonus.ATTACKSPEED, (count.toReal() * 0.2).round())
					SetUnitMoveSpeed(crab, GetUnitMoveSpeed(crab)+10)
					for i = 0 to 4
						let pig = createUnit(CRAB_PLAYER, PIGLET_ID, crab.getPos(), angle(0))..issuePointOrder("attack", waypoints.getFirst().point)
						..setTimedLife(120.)
						addUnitBonus(pig, Bonus.LIFEREGEN, (count / 12.).round())
						addUnitBonus(pig, Bonus.LIFE, (count.toReal() * 2.).round())
			end)
		end)
